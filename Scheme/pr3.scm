(define (prime? n)
  (define (primetest n k)
	(let ((a (+ (random (- n 1)) 1)))
	  (cond ((= k 0) #t)
			((= (remainder (expt a n) n) a) (primetest n (- k 1)))
			(else #f))))
  (primetest n 10))
(define (factor n)
  (define (fact lst i)
	(cond ((>= i (sqrt n)) lst)
		  ((= (remainder n i) 0) (fact (append lst (list i)) (1+ i)))
		  (else (fact lst (1+ i)))))
  (fact '() 2))
(define (biggestprimefact n)
  (car (sort (filter prime? (factor n)) >)))
